{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DST\\\\OneDrive\\\\Documents\\\\New folder (3)\\\\aust\\\\src\\\\MainPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './MainPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dummyPosts = [{\n  id: 1,\n  author: {\n    id: 1,\n    name: 'Jane Doe'\n  },\n  content: 'This is a sample post!',\n  reactions: ['👍', '❤️', '😂'],\n  comments: [{\n    id: 1,\n    author: {\n      id: 2,\n      name: 'John Smith'\n    },\n    text: 'Nice post!',\n    reactions: ['👍', '❤️', '😂']\n  }]\n}, {\n  id: 2,\n  author: {\n    id: 2,\n    name: 'John Smith'\n  },\n  content: 'Another post here.',\n  reactions: ['👍', '❤️', '😂'],\n  comments: []\n}\n// Add more posts as needed for pagination\n];\nconst POSTS_PER_PAGE = 1;\nfunction MainPage() {\n  _s();\n  const [page, setPage] = useState(1);\n  const [postReactions, setPostReactions] = useState({});\n  const [commentReactions, setCommentReactions] = useState({});\n  const paginatedPosts = dummyPosts.slice((page - 1) * POSTS_PER_PAGE, page * POSTS_PER_PAGE);\n  const totalPages = Math.ceil(dummyPosts.length / POSTS_PER_PAGE);\n  const handlePostReaction = (postId, idx) => {\n    setPostReactions({\n      ...postReactions,\n      [postId]: idx\n    });\n  };\n  const handleCommentReaction = (commentId, idx) => {\n    setCommentReactions({\n      ...commentReactions,\n      [commentId]: idx\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [paginatedPosts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"author\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/author/${post.author.id}`,\n          children: post.author.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reactions\",\n        children: post.reactions.map((icon, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: postReactions[post.id] === idx ? 'reaction active' : 'reaction',\n          onClick: () => handlePostReaction(post.id, idx),\n          role: \"button\",\n          tabIndex: 0,\n          children: icon\n        }, icon, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments\",\n        children: post.comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-author\",\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: `/author/${comment.author.id}`,\n              children: comment.author.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 19\n            }, this), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-text\",\n            children: [\" \", comment.text]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-reactions\",\n            children: comment.reactions.map((icon, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: commentReactions[comment.id] === idx ? 'reaction active' : 'reaction',\n              onClick: () => handleCommentReaction(comment.id, idx),\n              role: \"button\",\n              tabIndex: 0,\n              children: icon\n            }, icon, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this)]\n        }, comment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, post.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: Array.from({\n        length: totalPages\n      }, (_, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: page === i + 1 ? 'page-btn active' : 'page-btn',\n        onClick: () => setPage(i + 1),\n        children: i + 1\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(MainPage, \"Pagj3JTqgiMR8ahGvGkt9tQswso=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","Link","jsxDEV","_jsxDEV","dummyPosts","id","author","name","content","reactions","comments","text","POSTS_PER_PAGE","MainPage","_s","page","setPage","postReactions","setPostReactions","commentReactions","setCommentReactions","paginatedPosts","slice","totalPages","Math","ceil","length","handlePostReaction","postId","idx","handleCommentReaction","commentId","className","children","map","post","to","fileName","_jsxFileName","lineNumber","columnNumber","icon","onClick","role","tabIndex","comment","Array","from","_","i","_c","$RefreshReg$"],"sources":["C:/Users/DST/OneDrive/Documents/New folder (3)/aust/src/MainPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './MainPage.css';\r\n\r\nconst dummyPosts = [\r\n  {\r\n    id: 1,\r\n    author: { id: 1, name: 'Jane Doe' },\r\n    content: 'This is a sample post!',\r\n    reactions: ['👍', '❤️', '😂'],\r\n    comments: [\r\n      { id: 1, author: { id: 2, name: 'John Smith' }, text: 'Nice post!', reactions: ['👍', '❤️', '😂'] },\r\n    ],\r\n  },\r\n  {\r\n    id: 2,\r\n    author: { id: 2, name: 'John Smith' },\r\n    content: 'Another post here.',\r\n    reactions: ['👍', '❤️', '😂'],\r\n    comments: [],\r\n  },\r\n  // Add more posts as needed for pagination\r\n];\r\n\r\nconst POSTS_PER_PAGE = 1;\r\n\r\nfunction MainPage() {\r\n  const [page, setPage] = useState(1);\r\n  const [postReactions, setPostReactions] = useState({});\r\n  const [commentReactions, setCommentReactions] = useState({});\r\n\r\n  const paginatedPosts = dummyPosts.slice((page - 1) * POSTS_PER_PAGE, page * POSTS_PER_PAGE);\r\n  const totalPages = Math.ceil(dummyPosts.length / POSTS_PER_PAGE);\r\n\r\n  const handlePostReaction = (postId, idx) => {\r\n    setPostReactions({ ...postReactions, [postId]: idx });\r\n  };\r\n\r\n  const handleCommentReaction = (commentId, idx) => {\r\n    setCommentReactions({ ...commentReactions, [commentId]: idx });\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-container\">\r\n      {paginatedPosts.map(post => (\r\n        <div className=\"post\" key={post.id}>\r\n          <div className=\"author\">\r\n            <Link to={`/author/${post.author.id}`}>{post.author.name}</Link>\r\n          </div>\r\n          <div className=\"content\">{post.content}</div>\r\n          <div className=\"reactions\">\r\n            {post.reactions.map((icon, idx) => (\r\n              <span\r\n                key={icon}\r\n                className={postReactions[post.id] === idx ? 'reaction active' : 'reaction'}\r\n                onClick={() => handlePostReaction(post.id, idx)}\r\n                role=\"button\"\r\n                tabIndex={0}\r\n              >\r\n                {icon}\r\n              </span>\r\n            ))}\r\n          </div>\r\n          <div className=\"comments\">\r\n            {post.comments.map(comment => (\r\n              <div className=\"comment\" key={comment.id}>\r\n                <span className=\"comment-author\">\r\n                  <Link to={`/author/${comment.author.id}`}>{comment.author.name}</Link>:\r\n                </span>\r\n                <span className=\"comment-text\"> {comment.text}</span>\r\n                <span className=\"comment-reactions\">\r\n                  {comment.reactions.map((icon, idx) => (\r\n                    <span\r\n                      key={icon}\r\n                      className={commentReactions[comment.id] === idx ? 'reaction active' : 'reaction'}\r\n                      onClick={() => handleCommentReaction(comment.id, idx)}\r\n                      role=\"button\"\r\n                      tabIndex={0}\r\n                    >\r\n                      {icon}\r\n                    </span>\r\n                  ))}\r\n                </span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <div className=\"pagination\">\r\n        {Array.from({ length: totalPages }, (_, i) => (\r\n          <button\r\n            key={i}\r\n            className={page === i + 1 ? 'page-btn active' : 'page-btn'}\r\n            onClick={() => setPage(i + 1)}\r\n          >\r\n            {i + 1}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}